// @generated by the capnpc-dart plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: lib/rpc/schemas/rpc.capnp

// ignore: unused_import
import 'package:capnp/capnp.dart' as capnp;
import 'dart:core' as core;



class Message {
  capnp.StructFactory<MessageReader> reader = MessageReader.from;
  capnp.StructBuilderFactory<MessageBuilder> builder = MessageBuilder.build;
  core.int ID = 0x91b79f1f808db032;
}

class MessageReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const MessageReader(this.segmentView, this.dataSectionLengthInWords);
  static MessageReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      MessageReader(segmentView, dataSectionLengthInWords);

  MessageReader? get unimplemented {
    var tag = which();
    if(tag != null && tag == MessageTag.Unimplemented)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Message().reader);
  }
  ExceptionReader? get abort {
    var tag = which();
    if(tag != null && tag == MessageTag.Abort)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Exception().reader);
  }
  CallReader? get call {
    var tag = which();
    if(tag != null && tag == MessageTag.Call)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Call().reader);
  }
  ReturnReader? get return_ {
    var tag = which();
    if(tag != null && tag == MessageTag.Return)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Return().reader);
  }
  FinishReader? get finish {
    var tag = which();
    if(tag != null && tag == MessageTag.Finish)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Finish().reader);
  }
  ResolveReader? get resolve {
    var tag = which();
    if(tag != null && tag == MessageTag.Resolve)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Resolve().reader);
  }
  ReleaseReader? get release {
    var tag = which();
    if(tag != null && tag == MessageTag.Release)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Release().reader);
  }
  capnp.Pointer? get obsoleteSave {
    var tag = which();
    if(tag != null && tag == MessageTag.ObsoleteSave)
      return segmentView.getAnyPointer(dataSectionLengthInWords + 0);
  }
  BootstrapReader? get bootstrap {
    var tag = which();
    if(tag != null && tag == MessageTag.Bootstrap)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Bootstrap().reader);
  }
  capnp.Pointer? get obsoleteDelete {
    var tag = which();
    if(tag != null && tag == MessageTag.ObsoleteDelete)
      return segmentView.getAnyPointer(dataSectionLengthInWords + 0);
  }
  ProvideReader? get provide {
    var tag = which();
    if(tag != null && tag == MessageTag.Provide)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Provide().reader);
  }
  AcceptReader? get accept {
    var tag = which();
    if(tag != null && tag == MessageTag.Accept)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Accept().reader);
  }
  JoinReader? get join {
    var tag = which();
    if(tag != null && tag == MessageTag.Join)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Join().reader);
  }
  DisembargoReader? get disembargo {
    var tag = which();
    if(tag != null && tag == MessageTag.Disembargo)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Disembargo().reader);
  }
  MessageTag? which() {
    return segmentView.getEnum(0, MessageTag.values);
  }
}

class MessageBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const MessageBuilder(this.segmentView);
  static capnp.BuilderReturn<MessageBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => MessageBuilder(root));
  }

  MessageReader get reader => MessageReader(segmentView, dataSectionLengthInWords);

  MessageBuilder initUnimplemented() {
    segmentView.setUInt16(0, MessageTag.Unimplemented.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Message().builder);
  }

  set unimplemented(MessageReader value) {
    segmentView.setUInt16(0, MessageTag.Unimplemented.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  ExceptionBuilder initAbort() {
    segmentView.setUInt16(0, MessageTag.Abort.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Exception().builder);
  }

  set abort(ExceptionReader value) {
    segmentView.setUInt16(0, MessageTag.Abort.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  CallBuilder initCall() {
    segmentView.setUInt16(0, MessageTag.Call.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Call().builder);
  }

  set call(CallReader value) {
    segmentView.setUInt16(0, MessageTag.Call.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  ReturnBuilder initReturn() {
    segmentView.setUInt16(0, MessageTag.Return.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Return().builder);
  }

  set return_(ReturnReader value) {
    segmentView.setUInt16(0, MessageTag.Return.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  FinishBuilder initFinish() {
    segmentView.setUInt16(0, MessageTag.Finish.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Finish().builder);
  }

  set finish(FinishReader value) {
    segmentView.setUInt16(0, MessageTag.Finish.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  ResolveBuilder initResolve() {
    segmentView.setUInt16(0, MessageTag.Resolve.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Resolve().builder);
  }

  set resolve(ResolveReader value) {
    segmentView.setUInt16(0, MessageTag.Resolve.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  ReleaseBuilder initRelease() {
    segmentView.setUInt16(0, MessageTag.Release.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Release().builder);
  }

  set release(ReleaseReader value) {
    segmentView.setUInt16(0, MessageTag.Release.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  set obsoleteSave(capnp.Pointer value) {
    segmentView.setUInt16(0, MessageTag.ObsoleteSave.index);
    segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
  }
  BootstrapBuilder initBootstrap() {
    segmentView.setUInt16(0, MessageTag.Bootstrap.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Bootstrap().builder);
  }

  set bootstrap(BootstrapReader value) {
    segmentView.setUInt16(0, MessageTag.Bootstrap.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  set obsoleteDelete(capnp.Pointer value) {
    segmentView.setUInt16(0, MessageTag.ObsoleteDelete.index);
    segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
  }
  ProvideBuilder initProvide() {
    segmentView.setUInt16(0, MessageTag.Provide.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Provide().builder);
  }

  set provide(ProvideReader value) {
    segmentView.setUInt16(0, MessageTag.Provide.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  AcceptBuilder initAccept() {
    segmentView.setUInt16(0, MessageTag.Accept.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Accept().builder);
  }

  set accept(AcceptReader value) {
    segmentView.setUInt16(0, MessageTag.Accept.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  JoinBuilder initJoin() {
    segmentView.setUInt16(0, MessageTag.Join.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Join().builder);
  }

  set join(JoinReader value) {
    segmentView.setUInt16(0, MessageTag.Join.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  DisembargoBuilder initDisembargo() {
    segmentView.setUInt16(0, MessageTag.Disembargo.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Disembargo().builder);
  }

  set disembargo(DisembargoReader value) {
    segmentView.setUInt16(0, MessageTag.Disembargo.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

}
enum MessageTag {
  Unimplemented,
  Abort,
  Call,
  Return,
  Finish,
  Resolve,
  Release,
  ObsoleteSave,
  Bootstrap,
  ObsoleteDelete,
  Provide,
  Accept,
  Join,
  Disembargo,
}

class Bootstrap {
  capnp.StructFactory<BootstrapReader> reader = BootstrapReader.from;
  capnp.StructBuilderFactory<BootstrapBuilder> builder = BootstrapBuilder.build;
  core.int ID = 0xe94ccf8031176ec4;
}

class BootstrapReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const BootstrapReader(this.segmentView, this.dataSectionLengthInWords);
  static BootstrapReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      BootstrapReader(segmentView, dataSectionLengthInWords);

  core.int get questionId => segmentView.getUInt32(0);
  capnp.Pointer get deprecatedObjectId => segmentView.getAnyPointer(dataSectionLengthInWords + 0);
}

class BootstrapBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const BootstrapBuilder(this.segmentView);
  static capnp.BuilderReturn<BootstrapBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => BootstrapBuilder(root));
  }

  BootstrapReader get reader => BootstrapReader(segmentView, dataSectionLengthInWords);

  set questionId (core.int value) => segmentView.setUInt32(0, value);
  set deprecatedObjectId (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
}

class Call {
  capnp.StructFactory<CallReader> reader = CallReader.from;
  capnp.StructBuilderFactory<CallBuilder> builder = CallBuilder.build;
  core.int ID = 0x836a53ce789d4cd4;
}

class CallReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const CallReader(this.segmentView, this.dataSectionLengthInWords);
  static CallReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      CallReader(segmentView, dataSectionLengthInWords);

  core.int get questionId => segmentView.getUInt32(0);
  MessageTargetReader get target => segmentView.getStruct(dataSectionLengthInWords + 0, MessageTarget().reader);
  core.int get interfaceId => segmentView.getUInt64(8);
  core.int get methodId => segmentView.getUInt16(4);
  PayloadReader get params => segmentView.getStruct(dataSectionLengthInWords + 1, Payload().reader);
  SendResultsToReader get sendResultsTo => SendResultsToReader(segmentView, dataSectionLengthInWords);
  core.bool get allowThirdPartyTailCall => segmentView.getBool(128);
}

class CallBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 3;
  const CallBuilder(this.segmentView);
  static capnp.BuilderReturn<CallBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(3, 3), (root) => CallBuilder(root));
  }

  CallReader get reader => CallReader(segmentView, dataSectionLengthInWords);

  set questionId (core.int value) => segmentView.setUInt32(0, value);
  MessageTargetBuilder initTarget() =>
    segmentView.newStruct(dataSectionLengthInWords + 0, MessageTarget().builder);
  set target (MessageTargetReader value) => segmentView.setStruct(dataSectionLengthInWords + 0, value);
  set interfaceId (core.int value) => segmentView.setUInt64(8, value);
  set methodId (core.int value) => segmentView.setUInt16(4, value);
  PayloadBuilder initParams() =>
    segmentView.newStruct(dataSectionLengthInWords + 1, Payload().builder);
  set params (PayloadReader value) => segmentView.setStruct(dataSectionLengthInWords + 1, value);
  SendResultsToBuilder get sendResultsTo => SendResultsToBuilder(segmentView, dataSectionLengthInWords);
  set allowThirdPartyTailCall (core.bool value) => segmentView.setBool(128, value);
}
enum SendResultsToTag {
  Caller,
  Yourself,
  ThirdParty,
}

class SendResultsToReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const SendResultsToReader(this.segmentView, this.dataSectionLengthInWords);
  static SendResultsToReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      SendResultsToReader(segmentView, dataSectionLengthInWords);

  SendResultsToTag? which() {
    return segmentView.getEnum(3, SendResultsToTag.values);
  }

  capnp.NullableVoid? get caller {
    var tag = which();
    if(tag != null && tag == SendResultsToTag.Caller)
      return segmentView.getVoid(0);
  }
  capnp.NullableVoid? get yourself {
    var tag = which();
    if(tag != null && tag == SendResultsToTag.Yourself)
      return segmentView.getVoid(0);
  }
  capnp.Pointer? get thirdParty {
    var tag = which();
    if(tag != null && tag == SendResultsToTag.ThirdParty)
      return segmentView.getAnyPointer(dataSectionLengthInWords + 2);
  }
}

class SendResultsToBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const SendResultsToBuilder(this.segmentView, this.dataSectionLengthInWords);
  static SendResultsToBuilder from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords
  ) =>
      SendResultsToBuilder(segmentView, dataSectionLengthInWords);

  SendResultsToReader get reader => SendResultsToReader(segmentView, dataSectionLengthInWords);

  set caller(capnp.NullableVoid value) {
    segmentView.setUInt16(6, SendResultsToTag.Caller.index);
    segmentView.setVoid(0, value);
  }
  set yourself(capnp.NullableVoid value) {
    segmentView.setUInt16(6, SendResultsToTag.Yourself.index);
    segmentView.setVoid(0, value);
  }
  set thirdParty(capnp.Pointer value) {
    segmentView.setUInt16(6, SendResultsToTag.ThirdParty.index);
    segmentView.setAnyPointer(dataSectionLengthInWords + 2, value);
  }
}


class Return {
  capnp.StructFactory<ReturnReader> reader = ReturnReader.from;
  capnp.StructBuilderFactory<ReturnBuilder> builder = ReturnBuilder.build;
  core.int ID = 0x9e19b28d3db3573a;
}

class ReturnReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const ReturnReader(this.segmentView, this.dataSectionLengthInWords);
  static ReturnReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      ReturnReader(segmentView, dataSectionLengthInWords);

  core.int get answerId => segmentView.getUInt32(0);
  core.bool get releaseParamCaps => segmentView.getBool(32);
  PayloadReader? get results {
    var tag = which();
    if(tag != null && tag == ReturnTag.Results)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Payload().reader);
  }
  ExceptionReader? get exception {
    var tag = which();
    if(tag != null && tag == ReturnTag.Exception)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Exception().reader);
  }
  capnp.NullableVoid? get canceled {
    var tag = which();
    if(tag != null && tag == ReturnTag.Canceled)
      return segmentView.getVoid(0);
  }
  capnp.NullableVoid? get resultsSentElsewhere {
    var tag = which();
    if(tag != null && tag == ReturnTag.ResultsSentElsewhere)
      return segmentView.getVoid(0);
  }
  core.int? get takeFromOtherQuestion {
    var tag = which();
    if(tag != null && tag == ReturnTag.TakeFromOtherQuestion)
      return segmentView.getUInt32(8);
  }
  capnp.Pointer? get acceptFromThirdParty {
    var tag = which();
    if(tag != null && tag == ReturnTag.AcceptFromThirdParty)
      return segmentView.getAnyPointer(dataSectionLengthInWords + 0);
  }
  ReturnTag? which() {
    return segmentView.getEnum(3, ReturnTag.values);
  }
}

class ReturnBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 2;
  const ReturnBuilder(this.segmentView);
  static capnp.BuilderReturn<ReturnBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(2, 1), (root) => ReturnBuilder(root));
  }

  ReturnReader get reader => ReturnReader(segmentView, dataSectionLengthInWords);

  set answerId (core.int value) => segmentView.setUInt32(0, value);
  set releaseParamCaps (core.bool value) => segmentView.setBool(32, value);
  PayloadBuilder initResults() {
    segmentView.setUInt16(6, ReturnTag.Results.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Payload().builder);
  }

  set results(PayloadReader value) {
    segmentView.setUInt16(6, ReturnTag.Results.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  ExceptionBuilder initException() {
    segmentView.setUInt16(6, ReturnTag.Exception.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Exception().builder);
  }

  set exception(ExceptionReader value) {
    segmentView.setUInt16(6, ReturnTag.Exception.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  set canceled(capnp.NullableVoid value) {
    segmentView.setUInt16(6, ReturnTag.Canceled.index);
    segmentView.setVoid(0, value);
  }
  set resultsSentElsewhere(capnp.NullableVoid value) {
    segmentView.setUInt16(6, ReturnTag.ResultsSentElsewhere.index);
    segmentView.setVoid(0, value);
  }
  set takeFromOtherQuestion(core.int value) {
    segmentView.setUInt16(6, ReturnTag.TakeFromOtherQuestion.index);
    segmentView.setUInt32(8, value);
  }
  set acceptFromThirdParty(capnp.Pointer value) {
    segmentView.setUInt16(6, ReturnTag.AcceptFromThirdParty.index);
    segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
  }
}
enum ReturnTag {
  Results,
  Exception,
  Canceled,
  ResultsSentElsewhere,
  TakeFromOtherQuestion,
  AcceptFromThirdParty,
}

class Finish {
  capnp.StructFactory<FinishReader> reader = FinishReader.from;
  capnp.StructBuilderFactory<FinishBuilder> builder = FinishBuilder.build;
  core.int ID = 0xd37d2eb2c2f80e63;
}

class FinishReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const FinishReader(this.segmentView, this.dataSectionLengthInWords);
  static FinishReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      FinishReader(segmentView, dataSectionLengthInWords);

  core.int get questionId => segmentView.getUInt32(0);
  core.bool get releaseResultCaps => segmentView.getBool(32);
}

class FinishBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const FinishBuilder(this.segmentView);
  static capnp.BuilderReturn<FinishBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 0), (root) => FinishBuilder(root));
  }

  FinishReader get reader => FinishReader(segmentView, dataSectionLengthInWords);

  set questionId (core.int value) => segmentView.setUInt32(0, value);
  set releaseResultCaps (core.bool value) => segmentView.setBool(32, value);
}

class Resolve {
  capnp.StructFactory<ResolveReader> reader = ResolveReader.from;
  capnp.StructBuilderFactory<ResolveBuilder> builder = ResolveBuilder.build;
  core.int ID = 0xbbc29655fa89086e;
}

class ResolveReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const ResolveReader(this.segmentView, this.dataSectionLengthInWords);
  static ResolveReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      ResolveReader(segmentView, dataSectionLengthInWords);

  core.int get promiseId => segmentView.getUInt32(0);
  CapDescriptorReader? get cap {
    var tag = which();
    if(tag != null && tag == ResolveTag.Cap)
      return segmentView.getStruct(dataSectionLengthInWords + 0, CapDescriptor().reader);
  }
  ExceptionReader? get exception {
    var tag = which();
    if(tag != null && tag == ResolveTag.Exception)
      return segmentView.getStruct(dataSectionLengthInWords + 0, Exception().reader);
  }
  ResolveTag? which() {
    return segmentView.getEnum(2, ResolveTag.values);
  }
}

class ResolveBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const ResolveBuilder(this.segmentView);
  static capnp.BuilderReturn<ResolveBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => ResolveBuilder(root));
  }

  ResolveReader get reader => ResolveReader(segmentView, dataSectionLengthInWords);

  set promiseId (core.int value) => segmentView.setUInt32(0, value);
  CapDescriptorBuilder initCap() {
    segmentView.setUInt16(4, ResolveTag.Cap.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, CapDescriptor().builder);
  }

  set cap(CapDescriptorReader value) {
    segmentView.setUInt16(4, ResolveTag.Cap.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  ExceptionBuilder initException() {
    segmentView.setUInt16(4, ResolveTag.Exception.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, Exception().builder);
  }

  set exception(ExceptionReader value) {
    segmentView.setUInt16(4, ResolveTag.Exception.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

}
enum ResolveTag {
  Cap,
  Exception,
}

class Release {
  capnp.StructFactory<ReleaseReader> reader = ReleaseReader.from;
  capnp.StructBuilderFactory<ReleaseBuilder> builder = ReleaseBuilder.build;
  core.int ID = 0xad1a6c0d7dd07497;
}

class ReleaseReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const ReleaseReader(this.segmentView, this.dataSectionLengthInWords);
  static ReleaseReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      ReleaseReader(segmentView, dataSectionLengthInWords);

  core.int get id => segmentView.getUInt32(0);
  core.int get referenceCount => segmentView.getUInt32(4);
}

class ReleaseBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const ReleaseBuilder(this.segmentView);
  static capnp.BuilderReturn<ReleaseBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 0), (root) => ReleaseBuilder(root));
  }

  ReleaseReader get reader => ReleaseReader(segmentView, dataSectionLengthInWords);

  set id (core.int value) => segmentView.setUInt32(0, value);
  set referenceCount (core.int value) => segmentView.setUInt32(4, value);
}

class Disembargo {
  capnp.StructFactory<DisembargoReader> reader = DisembargoReader.from;
  capnp.StructBuilderFactory<DisembargoBuilder> builder = DisembargoBuilder.build;
  core.int ID = 0xf964368b0fbd3711;
}

class DisembargoReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const DisembargoReader(this.segmentView, this.dataSectionLengthInWords);
  static DisembargoReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      DisembargoReader(segmentView, dataSectionLengthInWords);

  MessageTargetReader get target => segmentView.getStruct(dataSectionLengthInWords + 0, MessageTarget().reader);
  ContextReader get context => ContextReader(segmentView, dataSectionLengthInWords);
}

class DisembargoBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const DisembargoBuilder(this.segmentView);
  static capnp.BuilderReturn<DisembargoBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => DisembargoBuilder(root));
  }

  DisembargoReader get reader => DisembargoReader(segmentView, dataSectionLengthInWords);

  MessageTargetBuilder initTarget() =>
    segmentView.newStruct(dataSectionLengthInWords + 0, MessageTarget().builder);
  set target (MessageTargetReader value) => segmentView.setStruct(dataSectionLengthInWords + 0, value);
  ContextBuilder get context => ContextBuilder(segmentView, dataSectionLengthInWords);
}
enum ContextTag {
  SenderLoopback,
  ReceiverLoopback,
  Accept,
  Provide,
}

class ContextReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const ContextReader(this.segmentView, this.dataSectionLengthInWords);
  static ContextReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      ContextReader(segmentView, dataSectionLengthInWords);

  ContextTag? which() {
    return segmentView.getEnum(4, ContextTag.values);
  }

  core.int? get senderLoopback {
    var tag = which();
    if(tag != null && tag == ContextTag.SenderLoopback)
      return segmentView.getUInt32(0);
  }
  core.int? get receiverLoopback {
    var tag = which();
    if(tag != null && tag == ContextTag.ReceiverLoopback)
      return segmentView.getUInt32(0);
  }
  capnp.NullableVoid? get accept {
    var tag = which();
    if(tag != null && tag == ContextTag.Accept)
      return segmentView.getVoid(0);
  }
  core.int? get provide {
    var tag = which();
    if(tag != null && tag == ContextTag.Provide)
      return segmentView.getUInt32(0);
  }
}

class ContextBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const ContextBuilder(this.segmentView, this.dataSectionLengthInWords);
  static ContextBuilder from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords
  ) =>
      ContextBuilder(segmentView, dataSectionLengthInWords);

  ContextReader get reader => ContextReader(segmentView, dataSectionLengthInWords);

  set senderLoopback(core.int value) {
    segmentView.setUInt16(4, ContextTag.SenderLoopback.index);
    segmentView.setUInt32(0, value);
  }
  set receiverLoopback(core.int value) {
    segmentView.setUInt16(4, ContextTag.ReceiverLoopback.index);
    segmentView.setUInt32(0, value);
  }
  set accept(capnp.NullableVoid value) {
    segmentView.setUInt16(4, ContextTag.Accept.index);
    segmentView.setVoid(0, value);
  }
  set provide(core.int value) {
    segmentView.setUInt16(4, ContextTag.Provide.index);
    segmentView.setUInt32(0, value);
  }
}


class Provide {
  capnp.StructFactory<ProvideReader> reader = ProvideReader.from;
  capnp.StructBuilderFactory<ProvideBuilder> builder = ProvideBuilder.build;
  core.int ID = 0x9c6a046bfbc1ac5a;
}

class ProvideReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const ProvideReader(this.segmentView, this.dataSectionLengthInWords);
  static ProvideReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      ProvideReader(segmentView, dataSectionLengthInWords);

  core.int get questionId => segmentView.getUInt32(0);
  MessageTargetReader get target => segmentView.getStruct(dataSectionLengthInWords + 0, MessageTarget().reader);
  capnp.Pointer get recipient => segmentView.getAnyPointer(dataSectionLengthInWords + 1);
}

class ProvideBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const ProvideBuilder(this.segmentView);
  static capnp.BuilderReturn<ProvideBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 2), (root) => ProvideBuilder(root));
  }

  ProvideReader get reader => ProvideReader(segmentView, dataSectionLengthInWords);

  set questionId (core.int value) => segmentView.setUInt32(0, value);
  MessageTargetBuilder initTarget() =>
    segmentView.newStruct(dataSectionLengthInWords + 0, MessageTarget().builder);
  set target (MessageTargetReader value) => segmentView.setStruct(dataSectionLengthInWords + 0, value);
  set recipient (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 1, value);
}

class Accept {
  capnp.StructFactory<AcceptReader> reader = AcceptReader.from;
  capnp.StructBuilderFactory<AcceptBuilder> builder = AcceptBuilder.build;
  core.int ID = 0xd4c9b56290554016;
}

class AcceptReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const AcceptReader(this.segmentView, this.dataSectionLengthInWords);
  static AcceptReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      AcceptReader(segmentView, dataSectionLengthInWords);

  core.int get questionId => segmentView.getUInt32(0);
  capnp.Pointer get provision => segmentView.getAnyPointer(dataSectionLengthInWords + 0);
  core.bool get embargo => segmentView.getBool(32);
}

class AcceptBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const AcceptBuilder(this.segmentView);
  static capnp.BuilderReturn<AcceptBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => AcceptBuilder(root));
  }

  AcceptReader get reader => AcceptReader(segmentView, dataSectionLengthInWords);

  set questionId (core.int value) => segmentView.setUInt32(0, value);
  set provision (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
  set embargo (core.bool value) => segmentView.setBool(32, value);
}

class Join {
  capnp.StructFactory<JoinReader> reader = JoinReader.from;
  capnp.StructBuilderFactory<JoinBuilder> builder = JoinBuilder.build;
  core.int ID = 0xfbe1980490e001af;
}

class JoinReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const JoinReader(this.segmentView, this.dataSectionLengthInWords);
  static JoinReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      JoinReader(segmentView, dataSectionLengthInWords);

  core.int get questionId => segmentView.getUInt32(0);
  MessageTargetReader get target => segmentView.getStruct(dataSectionLengthInWords + 0, MessageTarget().reader);
  capnp.Pointer get keyPart => segmentView.getAnyPointer(dataSectionLengthInWords + 1);
}

class JoinBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const JoinBuilder(this.segmentView);
  static capnp.BuilderReturn<JoinBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 2), (root) => JoinBuilder(root));
  }

  JoinReader get reader => JoinReader(segmentView, dataSectionLengthInWords);

  set questionId (core.int value) => segmentView.setUInt32(0, value);
  MessageTargetBuilder initTarget() =>
    segmentView.newStruct(dataSectionLengthInWords + 0, MessageTarget().builder);
  set target (MessageTargetReader value) => segmentView.setStruct(dataSectionLengthInWords + 0, value);
  set keyPart (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 1, value);
}

class MessageTarget {
  capnp.StructFactory<MessageTargetReader> reader = MessageTargetReader.from;
  capnp.StructBuilderFactory<MessageTargetBuilder> builder = MessageTargetBuilder.build;
  core.int ID = 0x95bc14545813fbc1;
}

class MessageTargetReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const MessageTargetReader(this.segmentView, this.dataSectionLengthInWords);
  static MessageTargetReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      MessageTargetReader(segmentView, dataSectionLengthInWords);

  core.int? get importedCap {
    var tag = which();
    if(tag != null && tag == MessageTargetTag.ImportedCap)
      return segmentView.getUInt32(0);
  }
  PromisedAnswerReader? get promisedAnswer {
    var tag = which();
    if(tag != null && tag == MessageTargetTag.PromisedAnswer)
      return segmentView.getStruct(dataSectionLengthInWords + 0, PromisedAnswer().reader);
  }
  MessageTargetTag? which() {
    return segmentView.getEnum(2, MessageTargetTag.values);
  }
}

class MessageTargetBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const MessageTargetBuilder(this.segmentView);
  static capnp.BuilderReturn<MessageTargetBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => MessageTargetBuilder(root));
  }

  MessageTargetReader get reader => MessageTargetReader(segmentView, dataSectionLengthInWords);

  set importedCap(core.int value) {
    segmentView.setUInt16(4, MessageTargetTag.ImportedCap.index);
    segmentView.setUInt32(0, value);
  }
  PromisedAnswerBuilder initPromisedAnswer() {
    segmentView.setUInt16(4, MessageTargetTag.PromisedAnswer.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, PromisedAnswer().builder);
  }

  set promisedAnswer(PromisedAnswerReader value) {
    segmentView.setUInt16(4, MessageTargetTag.PromisedAnswer.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

}
enum MessageTargetTag {
  ImportedCap,
  PromisedAnswer,
}

class Payload {
  capnp.StructFactory<PayloadReader> reader = PayloadReader.from;
  capnp.StructBuilderFactory<PayloadBuilder> builder = PayloadBuilder.build;
  core.int ID = 0x9a0e61223d96743b;
}

class PayloadReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const PayloadReader(this.segmentView, this.dataSectionLengthInWords);
  static PayloadReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      PayloadReader(segmentView, dataSectionLengthInWords);

  capnp.Pointer get content => segmentView.getAnyPointer(dataSectionLengthInWords + 0);
  capnp.UnmodifiableCompositeListView<CapDescriptorReader> get capTable => segmentView.getCompositeList(dataSectionLengthInWords + 1, CapDescriptor().reader);
}

class PayloadBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const PayloadBuilder(this.segmentView);
  static capnp.BuilderReturn<PayloadBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(0, 2), (root) => PayloadBuilder(root));
  }

  PayloadReader get reader => PayloadReader(segmentView, dataSectionLengthInWords);

  set content (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
  capnp.CompositeList<CapDescriptorBuilder> initCapTable(core.int len) =>
    segmentView.newCompositeList(dataSectionLengthInWords + 1, len, CapDescriptor().builder);
}

class CapDescriptor {
  capnp.StructFactory<CapDescriptorReader> reader = CapDescriptorReader.from;
  capnp.StructBuilderFactory<CapDescriptorBuilder> builder = CapDescriptorBuilder.build;
  core.int ID = 0x8523ddc40b86b8b0;
}

class CapDescriptorReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const CapDescriptorReader(this.segmentView, this.dataSectionLengthInWords);
  static CapDescriptorReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      CapDescriptorReader(segmentView, dataSectionLengthInWords);

  capnp.NullableVoid? get none {
    var tag = which();
    if(tag != null && tag == CapDescriptorTag.None)
      return segmentView.getVoid(0);
  }
  core.int? get senderHosted {
    var tag = which();
    if(tag != null && tag == CapDescriptorTag.SenderHosted)
      return segmentView.getUInt32(4);
  }
  core.int? get senderPromise {
    var tag = which();
    if(tag != null && tag == CapDescriptorTag.SenderPromise)
      return segmentView.getUInt32(4);
  }
  core.int? get receiverHosted {
    var tag = which();
    if(tag != null && tag == CapDescriptorTag.ReceiverHosted)
      return segmentView.getUInt32(4);
  }
  PromisedAnswerReader? get receiverAnswer {
    var tag = which();
    if(tag != null && tag == CapDescriptorTag.ReceiverAnswer)
      return segmentView.getStruct(dataSectionLengthInWords + 0, PromisedAnswer().reader);
  }
  ThirdPartyCapDescriptorReader? get thirdPartyHosted {
    var tag = which();
    if(tag != null && tag == CapDescriptorTag.ThirdPartyHosted)
      return segmentView.getStruct(dataSectionLengthInWords + 0, ThirdPartyCapDescriptor().reader);
  }
  core.int get attachedFd => segmentView.getUInt8(2);
  CapDescriptorTag? which() {
    return segmentView.getEnum(0, CapDescriptorTag.values);
  }
}

class CapDescriptorBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const CapDescriptorBuilder(this.segmentView);
  static capnp.BuilderReturn<CapDescriptorBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => CapDescriptorBuilder(root));
  }

  CapDescriptorReader get reader => CapDescriptorReader(segmentView, dataSectionLengthInWords);

  set none(capnp.NullableVoid value) {
    segmentView.setUInt16(0, CapDescriptorTag.None.index);
    segmentView.setVoid(0, value);
  }
  set senderHosted(core.int value) {
    segmentView.setUInt16(0, CapDescriptorTag.SenderHosted.index);
    segmentView.setUInt32(4, value);
  }
  set senderPromise(core.int value) {
    segmentView.setUInt16(0, CapDescriptorTag.SenderPromise.index);
    segmentView.setUInt32(4, value);
  }
  set receiverHosted(core.int value) {
    segmentView.setUInt16(0, CapDescriptorTag.ReceiverHosted.index);
    segmentView.setUInt32(4, value);
  }
  PromisedAnswerBuilder initReceiverAnswer() {
    segmentView.setUInt16(0, CapDescriptorTag.ReceiverAnswer.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, PromisedAnswer().builder);
  }

  set receiverAnswer(PromisedAnswerReader value) {
    segmentView.setUInt16(0, CapDescriptorTag.ReceiverAnswer.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  ThirdPartyCapDescriptorBuilder initThirdPartyHosted() {
    segmentView.setUInt16(0, CapDescriptorTag.ThirdPartyHosted.index);
    return segmentView.newStruct(dataSectionLengthInWords + 0, ThirdPartyCapDescriptor().builder);
  }

  set thirdPartyHosted(ThirdPartyCapDescriptorReader value) {
    segmentView.setUInt16(0, CapDescriptorTag.ThirdPartyHosted.index);
    segmentView.setStruct(dataSectionLengthInWords + 0, value);
  }

  set attachedFd (core.int value) => segmentView.setUInt8(2, value);
}
enum CapDescriptorTag {
  None,
  SenderHosted,
  SenderPromise,
  ReceiverHosted,
  ReceiverAnswer,
  ThirdPartyHosted,
}

class PromisedAnswer {
  capnp.StructFactory<PromisedAnswerReader> reader = PromisedAnswerReader.from;
  capnp.StructBuilderFactory<PromisedAnswerBuilder> builder = PromisedAnswerBuilder.build;
  core.int ID = 0xd800b1d6cd6f1ca0;
}

class PromisedAnswerReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const PromisedAnswerReader(this.segmentView, this.dataSectionLengthInWords);
  static PromisedAnswerReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      PromisedAnswerReader(segmentView, dataSectionLengthInWords);

  core.int get questionId => segmentView.getUInt32(0);
  capnp.UnmodifiableCompositeListView<OpReader> get transform => segmentView.getCompositeList(dataSectionLengthInWords + 0, Op().reader);
}

class PromisedAnswerBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const PromisedAnswerBuilder(this.segmentView);
  static capnp.BuilderReturn<PromisedAnswerBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => PromisedAnswerBuilder(root));
  }

  PromisedAnswerReader get reader => PromisedAnswerReader(segmentView, dataSectionLengthInWords);

  set questionId (core.int value) => segmentView.setUInt32(0, value);
  capnp.CompositeList<OpBuilder> initTransform(core.int len) =>
    segmentView.newCompositeList(dataSectionLengthInWords + 0, len, Op().builder);
}

class Op {
  capnp.StructFactory<OpReader> reader = OpReader.from;
  capnp.StructBuilderFactory<OpBuilder> builder = OpBuilder.build;
  core.int ID = 0xf316944415569081;
}

class OpReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const OpReader(this.segmentView, this.dataSectionLengthInWords);
  static OpReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      OpReader(segmentView, dataSectionLengthInWords);

  capnp.NullableVoid? get noop {
    var tag = which();
    if(tag != null && tag == OpTag.Noop)
      return segmentView.getVoid(0);
  }
  core.int? get getPointerField {
    var tag = which();
    if(tag != null && tag == OpTag.GetPointerField)
      return segmentView.getUInt16(2);
  }
  OpTag? which() {
    return segmentView.getEnum(0, OpTag.values);
  }
}

class OpBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const OpBuilder(this.segmentView);
  static capnp.BuilderReturn<OpBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 0), (root) => OpBuilder(root));
  }

  OpReader get reader => OpReader(segmentView, dataSectionLengthInWords);

  set noop(capnp.NullableVoid value) {
    segmentView.setUInt16(0, OpTag.Noop.index);
    segmentView.setVoid(0, value);
  }
  set getPointerField(core.int value) {
    segmentView.setUInt16(0, OpTag.GetPointerField.index);
    segmentView.setUInt16(2, value);
  }
}
enum OpTag {
  Noop,
  GetPointerField,
}

class ThirdPartyCapDescriptor {
  capnp.StructFactory<ThirdPartyCapDescriptorReader> reader = ThirdPartyCapDescriptorReader.from;
  capnp.StructBuilderFactory<ThirdPartyCapDescriptorBuilder> builder = ThirdPartyCapDescriptorBuilder.build;
  core.int ID = 0xd37007fde1f0027d;
}

class ThirdPartyCapDescriptorReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const ThirdPartyCapDescriptorReader(this.segmentView, this.dataSectionLengthInWords);
  static ThirdPartyCapDescriptorReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      ThirdPartyCapDescriptorReader(segmentView, dataSectionLengthInWords);

  capnp.Pointer get id => segmentView.getAnyPointer(dataSectionLengthInWords + 0);
  core.int get vineId => segmentView.getUInt32(0);
}

class ThirdPartyCapDescriptorBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const ThirdPartyCapDescriptorBuilder(this.segmentView);
  static capnp.BuilderReturn<ThirdPartyCapDescriptorBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => ThirdPartyCapDescriptorBuilder(root));
  }

  ThirdPartyCapDescriptorReader get reader => ThirdPartyCapDescriptorReader(segmentView, dataSectionLengthInWords);

  set id (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
  set vineId (core.int value) => segmentView.setUInt32(0, value);
}

class Exception {
  capnp.StructFactory<ExceptionReader> reader = ExceptionReader.from;
  capnp.StructBuilderFactory<ExceptionBuilder> builder = ExceptionBuilder.build;
  core.int ID = 0xd625b7063acf691a;
}

class ExceptionReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const ExceptionReader(this.segmentView, this.dataSectionLengthInWords);
  static ExceptionReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      ExceptionReader(segmentView, dataSectionLengthInWords);

  core.String get reason => segmentView.getText(dataSectionLengthInWords + 0);
  core.bool get obsoleteIsCallersFault => segmentView.getBool(0);
  core.int get obsoleteDurability => segmentView.getUInt16(2);
  Type get type => segmentView.getEnum(4, Type.values);
  core.String get trace => segmentView.getText(dataSectionLengthInWords + 1);
}

class ExceptionBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const ExceptionBuilder(this.segmentView);
  static capnp.BuilderReturn<ExceptionBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 2), (root) => ExceptionBuilder(root));
  }

  ExceptionReader get reader => ExceptionReader(segmentView, dataSectionLengthInWords);

  set reason (core.String value) => segmentView.setText(dataSectionLengthInWords + 0, value);
  set obsoleteIsCallersFault (core.bool value) => segmentView.setBool(0, value);
  set obsoleteDurability (core.int value) => segmentView.setUInt16(2, value);
  set type (Type value) => segmentView.setUInt16(4, value.index);
  set trace (core.String value) => segmentView.setText(dataSectionLengthInWords + 1, value);
}

enum Type {
  Failed,
  Overloaded,
  Disconnected,
  Unimplemented,
}

extension TypeTypeID on Type {
  static const core.int ID = 0xb28c96e23f4cbd58;
}
