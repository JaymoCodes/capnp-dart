// @generated by the capnpc-dart plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: example/pubsub.capnp

// ignore: unused_import
import 'package:capnp/capnp.dart' as capnp;
// ignore: unused_import
import 'package:capnp/rpc/capnp_rpc.dart' as capnp_rpc;
import 'dart:core' as core;
// ignore: unused_import
import 'dart:async' as async;


class Subscription {
  capnp_rpc.ClientFactory<SubscriptionClient> clientBuilder = SubscriptionClient.fromRaw;
}

class SubscriptionClient {
  SubscriptionClient(capnp_rpc.RawClient client) { throw core.UnimplementedError; }
  static SubscriptionClient fromRaw(capnp_rpc.RawClient client) { throw core.UnimplementedError; }
}

class SubscriptionServer  {
}


class PublisherSubscribeParams {
  capnp.StructFactory<PublisherSubscribeParamsReader> reader = PublisherSubscribeParamsReader.from;
  capnp.StructBuilderFactory<PublisherSubscribeParamsBuilder> builder = PublisherSubscribeParamsBuilder.build;
  core.int ID = 0xe7b82dcd2e1c5408;
}

class PublisherSubscribeParamsReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const PublisherSubscribeParamsReader(this.segmentView, this.dataSectionLengthInWords);
  static PublisherSubscribeParamsReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      PublisherSubscribeParamsReader(segmentView, dataSectionLengthInWords);

  capnp.Pointer get subscriber => segmentView.getAnyPointer(dataSectionLengthInWords + 0);
}

class PublisherSubscribeParamsBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const PublisherSubscribeParamsBuilder(this.segmentView);
  static capnp.BuilderReturn<PublisherSubscribeParamsBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(0, 1), (root) => PublisherSubscribeParamsBuilder(root));
  }

  PublisherSubscribeParamsReader get reader => PublisherSubscribeParamsReader(segmentView, dataSectionLengthInWords);

  set subscriber (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
}

class PublisherSubscribeResults {
  capnp.StructFactory<PublisherSubscribeResultsReader> reader = PublisherSubscribeResultsReader.from;
  capnp.StructBuilderFactory<PublisherSubscribeResultsBuilder> builder = PublisherSubscribeResultsBuilder.build;
  core.int ID = 0xbb2440239477be07;
}

class PublisherSubscribeResultsReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const PublisherSubscribeResultsReader(this.segmentView, this.dataSectionLengthInWords);
  static PublisherSubscribeResultsReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      PublisherSubscribeResultsReader(segmentView, dataSectionLengthInWords);

  capnp.Pointer get subscription => segmentView.getAnyPointer(dataSectionLengthInWords + 0);
}

class PublisherSubscribeResultsBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const PublisherSubscribeResultsBuilder(this.segmentView);
  static capnp.BuilderReturn<PublisherSubscribeResultsBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(0, 1), (root) => PublisherSubscribeResultsBuilder(root));
  }

  PublisherSubscribeResultsReader get reader => PublisherSubscribeResultsReader(segmentView, dataSectionLengthInWords);

  set subscription (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
}
class Publisher {
  capnp_rpc.ClientFactory<PublisherClient> clientBuilder = PublisherClient.fromRaw;
}

class PublisherClient {
  PublisherClient(capnp_rpc.RawClient client) { throw core.UnimplementedError; }
  static PublisherClient fromRaw(capnp_rpc.RawClient client) { throw core.UnimplementedError; }
}

class PublisherServer  {
  async.FutureOr<capnp_rpc.Status> subscribe(PublisherSubscribeParams params, PublisherSubscribeResults results) =>
    capnp_rpc.Status.unimplemented("Method not Implemented");

}


class SubscriberPushMessageParams {
  capnp.StructFactory<SubscriberPushMessageParamsReader> reader = SubscriberPushMessageParamsReader.from;
  capnp.StructBuilderFactory<SubscriberPushMessageParamsBuilder> builder = SubscriberPushMessageParamsBuilder.build;
  core.int ID = 0x83df3dcb9b67c816;
}

class SubscriberPushMessageParamsReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const SubscriberPushMessageParamsReader(this.segmentView, this.dataSectionLengthInWords);
  static SubscriberPushMessageParamsReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      SubscriberPushMessageParamsReader(segmentView, dataSectionLengthInWords);

  core.String get message => segmentView.getText(dataSectionLengthInWords + 0);
}

class SubscriberPushMessageParamsBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const SubscriberPushMessageParamsBuilder(this.segmentView);
  static capnp.BuilderReturn<SubscriberPushMessageParamsBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(0, 1), (root) => SubscriberPushMessageParamsBuilder(root));
  }

  SubscriberPushMessageParamsReader get reader => SubscriberPushMessageParamsReader(segmentView, dataSectionLengthInWords);

  set message (core.String value) => segmentView.setText(dataSectionLengthInWords + 0, value);
}

class SubscriberPushMessageResults {
  capnp.StructFactory<SubscriberPushMessageResultsReader> reader = SubscriberPushMessageResultsReader.from;
  capnp.StructBuilderFactory<SubscriberPushMessageResultsBuilder> builder = SubscriberPushMessageResultsBuilder.build;
  core.int ID = 0xf38df93df7aed6cd;
}

class SubscriberPushMessageResultsReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const SubscriberPushMessageResultsReader(this.segmentView, this.dataSectionLengthInWords);
  static SubscriberPushMessageResultsReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      SubscriberPushMessageResultsReader(segmentView, dataSectionLengthInWords);

}

class SubscriberPushMessageResultsBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const SubscriberPushMessageResultsBuilder(this.segmentView);
  static capnp.BuilderReturn<SubscriberPushMessageResultsBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(0, 0), (root) => SubscriberPushMessageResultsBuilder(root));
  }

  SubscriberPushMessageResultsReader get reader => SubscriberPushMessageResultsReader(segmentView, dataSectionLengthInWords);

}
class Subscriber {
  capnp_rpc.ClientFactory<SubscriberClient> clientBuilder = SubscriberClient.fromRaw;
}

class SubscriberClient {
  SubscriberClient(capnp_rpc.RawClient client) { throw core.UnimplementedError; }
  static SubscriberClient fromRaw(capnp_rpc.RawClient client) { throw core.UnimplementedError; }
}

class SubscriberServer  {
  async.FutureOr<capnp_rpc.Status> pushMessage(SubscriberPushMessageParams params, SubscriberPushMessageResults results) =>
    capnp_rpc.Status.unimplemented("Method not Implemented");

}

