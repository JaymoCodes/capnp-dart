// @generated by the capnpc-dart plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: example/pubsub.capnp

// ignore: unused_import
import 'package:capnp/capnp.dart' as capnp;
// ignore: unused_import
import 'package:capnp/rpc/capnp_rpc.dart' as capnp_rpc;
import 'dart:core' as core;
// ignore: unused_import
import 'dart:async' as async;

// ignore: unused_import
import 'pubsub_subscription_capnp.dart' as pubsub_capnp_subscription_;
// ignore: unused_import
import 'pubsub_publisher_capnp.dart' as pubsub_capnp_publisher_;
// ignore: unused_import
import 'pubsub_subscriber_capnp.dart' as pubsub_capnp_subscriber_;
// ignore: unused_import
import 'pubsub_capnp.dart' as pubsub_capnp_;


class SubscribeParams {
  capnp.StructFactory<SubscribeParamsReader> reader = SubscribeParamsReader.from;
  capnp.StructBuilderFactory<SubscribeParamsBuilder> builder = SubscribeParamsBuilder.build;
  core.int ID = 0xe7b82dcd2e1c5408;
}

class SubscribeParamsReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const SubscribeParamsReader(this.segmentView, this.dataSectionLengthInWords);
  static SubscribeParamsReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      SubscribeParamsReader(segmentView, dataSectionLengthInWords);

  pubsub_capnp_subscriber_.SubscriberClient get subscriber => segmentView.getClient(dataSectionLengthInWords + 0, pubsub_capnp_subscriber_.SubscriberClient.fromRaw);
}

class SubscribeParamsBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const SubscribeParamsBuilder(this.segmentView);
  static capnp.BuilderReturn<SubscribeParamsBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(0, 1), (root) => SubscribeParamsBuilder(root));
  }

  SubscribeParamsReader get reader => SubscribeParamsReader(segmentView, dataSectionLengthInWords);

  capnp.AnyPointerBuilder get initSubscriber => segmentView.setAnyPointer(dataSectionLengthInWords + 0);
}

class SubscribeResults {
  capnp.StructFactory<SubscribeResultsReader> reader = SubscribeResultsReader.from;
  capnp.StructBuilderFactory<SubscribeResultsBuilder> builder = SubscribeResultsBuilder.build;
  core.int ID = 0xbb2440239477be07;
}

class SubscribeResultsReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const SubscribeResultsReader(this.segmentView, this.dataSectionLengthInWords);
  static SubscribeResultsReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      SubscribeResultsReader(segmentView, dataSectionLengthInWords);

  pubsub_capnp_subscription_.SubscriptionClient get subscription => segmentView.getClient(dataSectionLengthInWords + 0, pubsub_capnp_subscription_.SubscriptionClient.fromRaw);
}

class SubscribeResultsBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const SubscribeResultsBuilder(this.segmentView);
  static capnp.BuilderReturn<SubscribeResultsBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(0, 1), (root) => SubscribeResultsBuilder(root));
  }

  SubscribeResultsReader get reader => SubscribeResultsReader(segmentView, dataSectionLengthInWords);

  capnp.AnyPointerBuilder get initSubscription => segmentView.setAnyPointer(dataSectionLengthInWords + 0);
}
class PublisherClient {
  capnp_rpc.RawClient innerClient;

  PublisherClient(this.innerClient);
  static PublisherClient fromRaw(capnp_rpc.RawClient client) => PublisherClient(client);

  capnp_rpc.Request<SubscribeParamsBuilder,SubscribeResultsReader> get subscribeRequest =>
    capnp_rpc.Request.fromRaw(innerClient, 0x9c14da2500dd8d22, 0, SubscribeParamsBuilder.build, SubscribeResultsReader.from);

}

class PublisherServer  extends capnp_rpc.ServerDispatch {
  @core.override
  async.FutureOr<capnp_rpc.Status> dispatch(core.int interfaceId, core.int methodId, capnp.StructPointer params, capnp_rpc.PayloadBuilder results) {
    switch(interfaceId) {
      case 0x9c14da2500dd8d22:
        switch(methodId) {
          case 0:
            return subscribe(params.load(SubscribeParamsReader.from), results.initContent.initStruct(SubscribeResultsBuilder.build));
        }
    }
    return capnp_rpc.Status.unimplemented("Method not implemented.");
  }

  async.FutureOr<capnp_rpc.Status> subscribe(SubscribeParamsReader params, SubscribeResultsBuilder results) =>
    capnp_rpc.Status.unimplemented("Method not Implemented");

}

