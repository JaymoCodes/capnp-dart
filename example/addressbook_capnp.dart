// @generated by the capnpc-dart plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: example/addressbook.capnp

// ignore: unused_import
import 'package:capnp/capnp.dart' as capnp;
import 'dart:core' as core;

const core.int QUX = 123;

class Person {
  capnp.StructFactory<PersonReader> reader = PersonReader.from;
  capnp.StructBuilderFactory<PersonBuilder> builder = PersonBuilder.build;
  core.int ID = 0xa667db69aab2a9a8;
}

class PersonReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const PersonReader(this.segmentView, this.dataSectionLengthInWords);
  static PersonReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      PersonReader(segmentView, dataSectionLengthInWords);

  core.int get id => segmentView.getUInt32(0);
  core.String get name => segmentView.getText(dataSectionLengthInWords + 0);
  core.String get email => segmentView.getText(dataSectionLengthInWords + 1);
  capnp.UnmodifiableCompositeListView<PhoneNumberReader> get phones => segmentView.getCompositeList(dataSectionLengthInWords + 2, PhoneNumber().reader);
  EmploymentReader get employment => EmploymentReader(segmentView, dataSectionLengthInWords);
}

class PersonBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const PersonBuilder(this.segmentView);
  static capnp.BuilderReturn<PersonBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 4), (root) => PersonBuilder(root));
  }

  set id (core.int value) => segmentView.setUInt32(0, value);
  set name (core.String value) => segmentView.setText(dataSectionLengthInWords + 0, value);
  set email (core.String value) => segmentView.setText(dataSectionLengthInWords + 1, value);
  capnp.CompositeList<PhoneNumberBuilder> initPhones(core.int len) =>
    segmentView.newCompositeList(dataSectionLengthInWords + 2, len, PhoneNumber().builder);
  EmploymentBuilder get employment => EmploymentBuilder(segmentView, dataSectionLengthInWords);
}

class PhoneNumber {
  capnp.StructFactory<PhoneNumberReader> reader = PhoneNumberReader.from;
  capnp.StructBuilderFactory<PhoneNumberBuilder> builder = PhoneNumberBuilder.build;
  core.int ID = 0xf6c91ccc5d65a98b;
}

class PhoneNumberReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const PhoneNumberReader(this.segmentView, this.dataSectionLengthInWords);
  static PhoneNumberReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      PhoneNumberReader(segmentView, dataSectionLengthInWords);

  core.String get number => segmentView.getText(dataSectionLengthInWords + 0);
  Type get type => segmentView.getEnum(0, Type.values);
}

class PhoneNumberBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 1;
  const PhoneNumberBuilder(this.segmentView);
  static capnp.BuilderReturn<PhoneNumberBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(1, 1), (root) => PhoneNumberBuilder(root));
  }

  set number (core.String value) => segmentView.setText(dataSectionLengthInWords + 0, value);
  set type (Type value) => segmentView.setUInt16(0, value.index);
}

enum Type {
  Mobile,
  Home,
  Work,
}

extension TypeTypeID on Type {
  static const core.int ID = 0xa16093e406f925c7;
}
enum EmploymentTag {
  Unemployed,
  Employer,
  School,
  SelfEmployed,
}

class EmploymentReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const EmploymentReader(this.segmentView, this.dataSectionLengthInWords);
  static EmploymentReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      EmploymentReader(segmentView, dataSectionLengthInWords);

  EmploymentTag? which() {
    return segmentView.getEnum(4, EmploymentTag.values);
  }

  capnp.NullableVoid? get unemployed {
    var tag = which();
    if(tag != null && tag == EmploymentTag.Unemployed)
      return segmentView.getVoid(0);
  }
  core.String? get employer {
    var tag = which();
    if(tag != null && tag == EmploymentTag.Employer)
      return segmentView.getText(dataSectionLengthInWords + 3);
  }
  core.String? get school {
    var tag = which();
    if(tag != null && tag == EmploymentTag.School)
      return segmentView.getText(dataSectionLengthInWords + 3);
  }
  capnp.NullableVoid? get selfEmployed {
    var tag = which();
    if(tag != null && tag == EmploymentTag.SelfEmployed)
      return segmentView.getVoid(0);
  }
}

class EmploymentBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const EmploymentBuilder(this.segmentView, this.dataSectionLengthInWords);
  static EmploymentBuilder from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords
  ) =>
      EmploymentBuilder(segmentView, dataSectionLengthInWords);

  set unemployed(capnp.NullableVoid value) {
    segmentView.setUInt16(4, EmploymentTag.Unemployed.index);
    segmentView.setVoid(0, value);
  }
  set employer(core.String value) {
    segmentView.setUInt16(4, EmploymentTag.Employer.index);
    segmentView.setText(dataSectionLengthInWords + 3, value);
  }
  set school(core.String value) {
    segmentView.setUInt16(4, EmploymentTag.School.index);
    segmentView.setText(dataSectionLengthInWords + 3, value);
  }
  set selfEmployed(capnp.NullableVoid value) {
    segmentView.setUInt16(4, EmploymentTag.SelfEmployed.index);
    segmentView.setVoid(0, value);
  }
}


class AddressBook {
  capnp.StructFactory<AddressBookReader> reader = AddressBookReader.from;
  capnp.StructBuilderFactory<AddressBookBuilder> builder = AddressBookBuilder.build;
  core.int ID = 0xded4381d608d5d17;
}

class AddressBookReader {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const AddressBookReader(this.segmentView, this.dataSectionLengthInWords);
  static AddressBookReader from(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      AddressBookReader(segmentView, dataSectionLengthInWords);

  capnp.UnmodifiableCompositeListView<PersonReader> get people => segmentView.getCompositeList(dataSectionLengthInWords + 0, Person().reader);
}

class AddressBookBuilder {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const AddressBookBuilder(this.segmentView);
  static capnp.BuilderReturn<AddressBookBuilder> build() {
    return capnp.BuilderReturn(capnp.Layout(0, 1), (root) => AddressBookBuilder(root));
  }

  capnp.CompositeList<PersonBuilder> initPeople(core.int len) =>
    segmentView.newCompositeList(dataSectionLengthInWords + 0, len, Person().builder);
}

class Map<K,V> { /* K,V */
  capnp.StructFactory<MapReader<K,V>> reader = MapReader.from;
  capnp.StructBuilderFactory<MapBuilder<K,V>> builder = MapBuilder.build;
  core.int ID = 0xa567a2babb808dce;
}

class MapReader<K,V> {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const MapReader(this.segmentView, this.dataSectionLengthInWords);
  static MapReader<K,V> from<K,V>(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      MapReader(segmentView, dataSectionLengthInWords);

  capnp.UnmodifiableCompositeListView<EntryReader> get entries => segmentView.getCompositeList(dataSectionLengthInWords + 0, Entry().reader);
}

class MapBuilder<K,V> {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const MapBuilder(this.segmentView);
  static capnp.BuilderReturn<MapBuilder<K,V>> build<K,V>() {
    return capnp.BuilderReturn(capnp.Layout(0, 1), (root) => MapBuilder(root));
  }

  capnp.CompositeList<EntryBuilder> initEntries(core.int len) =>
    segmentView.newCompositeList(dataSectionLengthInWords + 0, len, Entry().builder);
}

class Entry<K,V> { /* K,V */
  capnp.StructFactory<EntryReader<K,V>> reader = EntryReader.from;
  capnp.StructBuilderFactory<EntryBuilder<K,V>> builder = EntryBuilder.build;
  core.int ID = 0xc07baffb8f94965b;
}

class EntryReader<K,V> {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords;
  const EntryReader(this.segmentView, this.dataSectionLengthInWords);
  static EntryReader<K,V> from<K,V>(
    capnp.SegmentView segmentView,
    core.int dataSectionLengthInWords,
  ) =>
      EntryReader(segmentView, dataSectionLengthInWords);

  capnp.Pointer get key => segmentView.getAnyPointer(dataSectionLengthInWords + 0);
  capnp.Pointer get value => segmentView.getAnyPointer(dataSectionLengthInWords + 1);
}

class EntryBuilder<K,V> {
  final capnp.SegmentView segmentView;
  final core.int dataSectionLengthInWords = 0;
  const EntryBuilder(this.segmentView);
  static capnp.BuilderReturn<EntryBuilder<K,V>> build<K,V>() {
    return capnp.BuilderReturn(capnp.Layout(0, 2), (root) => EntryBuilder(root));
  }

  set key (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 0, value);
  set value (capnp.Pointer value) => segmentView.setAnyPointer(dataSectionLengthInWords + 1, value);
}
